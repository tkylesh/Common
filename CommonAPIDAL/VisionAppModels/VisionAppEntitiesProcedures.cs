// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using CommonAPIDAL.VisionAppModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CommonAPIDAL.VisionAppModels
{
    public partial class VisionAppEntities
    {
        private IVisionAppEntitiesProcedures _procedures;

        public virtual IVisionAppEntitiesProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new VisionAppEntitiesProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IVisionAppEntitiesProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class VisionAppEntitiesProcedures : IVisionAppEntitiesProcedures
    {
        private readonly VisionAppEntities _context;

        public VisionAppEntitiesProcedures(VisionAppEntities context)
        {
            _context = context;
        }

        public virtual async Task<List<spGetAFFNewMemberDataResult>> spGetAFFNewMemberDataAsync(int? quoteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetAFFNewMemberDataResult>("EXEC @returnValue = [dbo].[spGetAFFNewMemberData] @quoteID = @quoteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetMemberSearchDataResult>> spGetMemberSearchDataAsync(string quoteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Size = 25,
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetMemberSearchDataResult>("EXEC @returnValue = [dbo].[spGetMemberSearchData] @quoteID = @quoteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> spRAPA2UpdateSelectedDetailAsync(int? QuoteID, string VIN, int? Seq, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QuoteID",
                    Value = QuoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VIN",
                    Size = 100,
                    Value = VIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Seq",
                    Value = Seq ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[spRAPA2UpdateSelectedDetail] @QuoteID = @QuoteID, @VIN = @VIN, @Seq = @Seq", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspGetVINDataByManufacturerIDResult>> uspGetVINDataByManufacturerIDAsync(string ManufacturerID, string State, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ManufacturerID",
                    Size = 3,
                    Value = ManufacturerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspGetVINDataByManufacturerIDResult>("EXEC @returnValue = [dbo].[uspGetVINDataByManufacturerID] @ManufacturerID = @ManufacturerID, @State = @State", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspGetVINDataByManufacturerIDLegacyResult>> uspGetVINDataByManufacturerIDLegacyAsync(string ManufacturerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ManufacturerID",
                    Size = 3,
                    Value = ManufacturerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspGetVINDataByManufacturerIDLegacyResult>("EXEC @returnValue = [dbo].[uspGetVINDataByManufacturerIDLegacy] @ManufacturerID = @ManufacturerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspVinLookup_MannufacturerID_TypeResult>> uspVinLookup_MannufacturerID_TypeAsync(string ManufacturerID, string State, string PrimaryorSupplementalFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ManufacturerID",
                    Size = 3,
                    Value = ManufacturerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 2,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PrimaryorSupplementalFlag",
                    Size = 1,
                    Value = PrimaryorSupplementalFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspVinLookup_MannufacturerID_TypeResult>("EXEC @returnValue = [dbo].[uspVinLookup_MannufacturerID_Type] @ManufacturerID = @ManufacturerID, @State = @State, @PrimaryorSupplementalFlag = @PrimaryorSupplementalFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
