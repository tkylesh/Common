// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CommonAPIDAL.VisionAppModels;

public partial class VisionAppEntities : DbContext
{
    public VisionAppEntities(DbContextOptions<VisionAppEntities> options)
        : base(options)
    {
    }

    public virtual DbSet<ALIATransactionLog> ALIATransactionLog { get; set; }

    public virtual DbSet<ISODrivers> ISODrivers { get; set; }

    public virtual DbSet<ISOVehicles> ISOVehicles { get; set; }

    public virtual DbSet<MakeModelLookup> MakeModelLookup { get; set; }

    public virtual DbSet<ProgramMaster> ProgramMaster { get; set; }

    public virtual DbSet<ProgramRevision> ProgramRevision { get; set; }

    public virtual DbSet<Rapa2_AntiLockBrakeIndicator> Rapa2_AntiLockBrakeIndicator { get; set; }

    public virtual DbSet<Rapa2_AntiTheftIndicator> Rapa2_AntiTheftIndicator { get; set; }

    public virtual DbSet<Rapa2_BodyInfo> Rapa2_BodyInfo { get; set; }

    public virtual DbSet<Rapa2_BodyStyle> Rapa2_BodyStyle { get; set; }

    public virtual DbSet<Rapa2_Chassis> Rapa2_Chassis { get; set; }

    public virtual DbSet<Rapa2_Cylinders> Rapa2_Cylinders { get; set; }

    public virtual DbSet<Rapa2_ElectronicStabilityControl> Rapa2_ElectronicStabilityControl { get; set; }

    public virtual DbSet<Rapa2_EngineInformation> Rapa2_EngineInformation { get; set; }

    public virtual DbSet<Rapa2_EngineType> Rapa2_EngineType { get; set; }

    public virtual DbSet<Rapa2_FieldChangeIndicator> Rapa2_FieldChangeIndicator { get; set; }

    public virtual DbSet<Rapa2_Limits> Rapa2_Limits { get; set; }

    public virtual DbSet<Rapa2_Make> Rapa2_Make { get; set; }

    public virtual DbSet<Rapa2_Restriant> Rapa2_Restriant { get; set; }

    public virtual DbSet<Rapa2_SpecInfoSelector> Rapa2_SpecInfoSelector { get; set; }

    public virtual DbSet<Rapa2_VinSearchAuditDtl> Rapa2_VinSearchAuditDtl { get; set; }

    public virtual DbSet<Rapa2_VinSearchAuditHdr> Rapa2_VinSearchAuditHdr { get; set; }

    public virtual DbSet<Staging_Applicant> Staging_Applicant { get; set; }

    public virtual DbSet<Staging_Coverage> Staging_Coverage { get; set; }

    public virtual DbSet<Staging_Driver> Staging_Driver { get; set; }

    public virtual DbSet<Staging_Policy> Staging_Policy { get; set; }

    public virtual DbSet<Staging_Vehicle> Staging_Vehicle { get; set; }

    public virtual DbSet<VIN_BodyStyle> VIN_BodyStyle { get; set; }

    public virtual DbSet<VIN_Make> VIN_Make { get; set; }

    public virtual DbSet<VIN_ModelInfo> VIN_ModelInfo { get; set; }

    public virtual DbSet<VinLiabilitySymbol> VinLiabilitySymbol { get; set; }

    public virtual DbSet<Vinmaster> Vinmaster { get; set; }

    public virtual DbSet<VinrapaLiability> VinrapaLiability { get; set; }

    public virtual DbSet<VinrapaLiabilitySupplemental> VinrapaLiabilitySupplemental { get; set; }

    public virtual DbSet<VinrapaPD> VinrapaPD { get; set; }

    public virtual DbSet<VinrapaSupplementalPD> VinrapaSupplementalPD { get; set; }

    public virtual DbSet<WebPDFs> WebPDFs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema("VISION\\Web Development Team");

        modelBuilder.Entity<ALIATransactionLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ALIA_ApiLog");

            entity.Property(e => e.ApiCalled).IsFixedLength();
            entity.Property(e => e.MemberName).IsFixedLength();
            entity.Property(e => e.MembershipNumber).IsFixedLength();
            entity.Property(e => e.PolicyNumber).IsFixedLength();
            entity.Property(e => e.QuoteId).IsFixedLength();
        });

        modelBuilder.Entity<MakeModelLookup>(entity =>
        {
            entity.ToTable("MakeModelLookup", "dbo", tb => tb.HasComment("Make Model Identity key"));

            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.MakeModelID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<ProgramMaster>(entity =>
        {
            entity.Property(e => e.ProgramID).ValueGeneratedNever();
            entity.Property(e => e.CurrentCarrierStorage).HasDefaultValue("");
            entity.Property(e => e.PaymentProcessor).HasDefaultValue(0);
            entity.Property(e => e.PolType).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
        });

        modelBuilder.Entity<ProgramRevision>(entity =>
        {
            entity.Property(e => e.ProgramRevID).ValueGeneratedNever();
            entity.Property(e => e.AtmVerifyEft).HasDefaultValue(true);
            entity.Property(e => e.MaxColl).HasDefaultValue(65);
            entity.Property(e => e.MaxComp).HasDefaultValue(65);
            entity.Property(e => e.MaxISO).HasDefaultValue(26);
            entity.Property(e => e.RateBookCode).IsFixedLength();
            entity.Property(e => e.UseAPLUS).HasDefaultValue(false);
            entity.Property(e => e.UseAttract30).HasDefaultValue(false);
            entity.Property(e => e.UseISO).HasDefaultValue(false);

            entity.HasOne(d => d.Program).WithMany(p => p.ProgramRevision)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProgramRevision_ProgramMaster");
        });

        modelBuilder.Entity<Rapa2_AntiLockBrakeIndicator>(entity =>
        {
            entity.Property(e => e.ABSCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_AntiTheftIndicator>(entity =>
        {
            entity.HasKey(e => e.atId).HasName("PK_Rapa2_AntiTheftIndicator ");

            entity.Property(e => e.AntiTheftCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_BodyInfo>(entity =>
        {
            entity.Property(e => e.BodyInfoCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_BodyStyle>(entity =>
        {
            entity.Property(e => e.BodyStyleCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_Chassis>(entity =>
        {
            entity.Property(e => e.ChassisCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_Cylinders>(entity =>
        {
            entity.Property(e => e.CylinderCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_ElectronicStabilityControl>(entity =>
        {
            entity.Property(e => e.ElectronicStabilityControlCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_EngineInformation>(entity =>
        {
            entity.Property(e => e.EngineInformationCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_EngineType>(entity =>
        {
            entity.Property(e => e.EngineTypeCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_FieldChangeIndicator>(entity =>
        {
            entity.Property(e => e.FieldChangeIndicatorCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_Limits>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.State).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_Make>(entity =>
        {
            entity.Property(e => e.MakeIsoCode).IsFixedLength();
            entity.Property(e => e.MakeNcicCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_Restriant>(entity =>
        {
            entity.Property(e => e.RestriantCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_SpecInfoSelector>(entity =>
        {
            entity.Property(e => e.SpecInfoSelectorCode).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_VinSearchAuditDtl>(entity =>
        {
            entity.Property(e => e.AntiLockBrakes).IsFixedLength();
            entity.Property(e => e.AntiTheftIndicator).IsFixedLength();
            entity.Property(e => e.BasicModelName).IsFixedLength();
            entity.Property(e => e.BodyInfo).IsFixedLength();
            entity.Property(e => e.BodyStyle).IsFixedLength();
            entity.Property(e => e.ElectronicStabilityControl).IsFixedLength();
            entity.Property(e => e.EngineCylinders).IsFixedLength();
            entity.Property(e => e.EngineInfo).IsFixedLength();
            entity.Property(e => e.EngineType).IsFixedLength();
            entity.Property(e => e.FourWheelDriveIndicator).IsFixedLength();
            entity.Property(e => e.FullModelName).IsFixedLength();
            entity.Property(e => e.InterimIndicator).IsFixedLength();
            entity.Property(e => e.ModelSeriesInfo).IsFixedLength();
            entity.Property(e => e.Restraint).IsFixedLength();
            entity.Property(e => e.RestraintInfo).IsFixedLength();
            entity.Property(e => e.SpecialHandlingIndicator).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.StateException).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VMPerformanceIndicator).IsFixedLength();
        });

        modelBuilder.Entity<Rapa2_VinSearchAuditHdr>(entity =>
        {
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.PolicyNbr).IsFixedLength();
            entity.Property(e => e.TransactionID).IsFixedLength();
            entity.Property(e => e.Vin).IsFixedLength();
        });

        modelBuilder.Entity<Staging_Applicant>(entity =>
        {
            entity.HasKey(e => e.apID).HasAnnotation("SqlServer:FillFactor", 100);

            entity.HasIndex(e => new { e.ApplicantNum, e.InsFirstName, e.InsLastName }, "IX_Staging_Applicant_ApplicantNum_InsFirstName_InsLastName").HasFillFactor(100);

            entity.HasIndex(e => new { e.InsFirstName, e.InsLastName }, "IX_Staging_Applicant_InsFirstName_InsLastName").HasFillFactor(100);

            entity.Property(e => e.AS400InsType).IsFixedLength();
            entity.Property(e => e.CountyCode).IsFixedLength();
            entity.Property(e => e.EndorsementAction).IsFixedLength();
            entity.Property(e => e.GarState).IsFixedLength();
            entity.Property(e => e.InsPhone1).IsFixedLength();
            entity.Property(e => e.InsPhone2).IsFixedLength();
            entity.Property(e => e.InsState).IsFixedLength();
            entity.Property(e => e.InsideCityLimits).HasDefaultValue(true);
            entity.Property(e => e.PriorPolStandardInd).IsFixedLength();
            entity.Property(e => e.TaxJurisdictionAssignBy)
                .HasDefaultValue("M")
                .IsFixedLength()
                .HasComment("(M)anul, (T)ritech");
        });

        modelBuilder.Entity<Staging_Coverage>(entity =>
        {
            entity.Property(e => e.EndorsementAction).IsFixedLength();

            entity.HasOne(d => d.sv).WithMany(p => p.Staging_Coverage)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Staging_Coverage_Staging_Vehicle");
        });

        modelBuilder.Entity<Staging_Driver>(entity =>
        {
            entity.HasKey(e => e.sdID).HasAnnotation("SqlServer:FillFactor", 100);

            entity.HasIndex(e => new { e.QuoteID, e.DrvNum }, "IX_Staging_Driver_unique")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.DrvPoints).IsFixedLength();
            entity.Property(e => e.DrvTypeID).HasComment("Principal, Excluded, Occasional, etc");
            entity.Property(e => e.EndorsementAction).IsFixedLength();
            entity.Property(e => e.Gender).IsFixedLength();
            entity.Property(e => e.LicenseState).IsFixedLength();
            entity.Property(e => e.MVROrdered).IsFixedLength();
            entity.Property(e => e.SR22State).IsFixedLength();
            entity.Property(e => e.SR50).HasDefaultValue(false);

            entity.HasOne(d => d.Quote).WithMany(p => p.Staging_Driver)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Staging_Driver_Staging_Policy");
        });

        modelBuilder.Entity<Staging_Policy>(entity =>
        {
            entity.HasKey(e => e.QuoteID).HasAnnotation("SqlServer:FillFactor", 100);

            entity.HasIndex(e => e.PolNum, "IX_Staging_Policy_policy").HasFillFactor(100);

            entity.Property(e => e.CCAcceptance).HasDefaultValue(false);
            entity.Property(e => e.EFTPaymentType).IsFixedLength();
            entity.Property(e => e.InspectionFormConfirm).HasDefaultValue(false);
            entity.Property(e => e.QuoteWithCredit).HasDefaultValue(false);
            entity.Property(e => e.RateStatusID).HasDefaultValue((short)1);
            entity.Property(e => e.RecurringPmt).HasDefaultValue((byte)0);
            entity.Property(e => e.UnsoldQuote).HasDefaultValue(false);

            entity.HasOne(d => d.ProgramRev).WithMany(p => p.Staging_Policy).HasConstraintName("FK_Staging_Policy_ProgramRevision");
        });

        modelBuilder.Entity<Staging_Vehicle>(entity =>
        {
            entity.HasIndex(e => new { e.QuoteID, e.VehicleNum }, "IX_Staging_Vehicle_unique")
                .IsUnique()
                .HasFillFactor(100);

            entity.Property(e => e.BiSymbol).IsFixedLength();
            entity.Property(e => e.CollSymbol).IsFixedLength();
            entity.Property(e => e.CommuteMiles).HasDefaultValue(0);
            entity.Property(e => e.CompSymbol).IsFixedLength();
            entity.Property(e => e.EndorsementAction).IsFixedLength();
            entity.Property(e => e.MedPaySymbol).IsFixedLength();
            entity.Property(e => e.NewPriceSymbol).IsFixedLength();
            entity.Property(e => e.PDSymbol).IsFixedLength();
            entity.Property(e => e.RAPAVersion).HasDefaultValue(1);
            entity.Property(e => e.VehiclePoints).HasDefaultValue((byte)0);
        });

        modelBuilder.Entity<VIN_BodyStyle>(entity =>
        {
            entity.HasKey(e => e.bsID).HasAnnotation("SqlServer:FillFactor", 90);
        });

        modelBuilder.Entity<VIN_Make>(entity =>
        {
            entity.HasKey(e => e.MakeID)
                .HasName("PK_VIN_Makes")
                .HasAnnotation("SqlServer:FillFactor", 90);
        });

        modelBuilder.Entity<VinLiabilitySymbol>(entity =>
        {
            entity.HasIndex(e => e.VIN, "IX_VinLiabilitySymbol").HasFillFactor(100);

            entity.Property(e => e.ClassCode).IsFixedLength();
            entity.Property(e => e.CurbWeight).IsFixedLength();
            entity.Property(e => e.FieldChangeInd).IsFixedLength();
            entity.Property(e => e.FilingDate).IsFixedLength();
            entity.Property(e => e.GrossVehicleWeight).IsFixedLength();
            entity.Property(e => e.Height).IsFixedLength();
            entity.Property(e => e.HorsePower).IsFixedLength();
            entity.Property(e => e.LiabilitySymbol).IsFixedLength();
            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.PIPSymbol).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VinChangeInd).IsFixedLength();
        });

        modelBuilder.Entity<Vinmaster>(entity =>
        {
            entity.HasKey(e => e.vinID)
                .IsClustered(false)
                .HasAnnotation("SqlServer:FillFactor", 90);

            entity.HasIndex(e => new { e.MakeID, e.FullModelName }, "IX_Vinmaster_Lookup2").HasFillFactor(100);

            entity.HasIndex(e => new { e.ModelYear, e.MakeCode }, "IX_Vinmaster_ModelYear_MakeCode").HasFillFactor(100);

            entity.HasIndex(e => new { e.ModelYear, e.ShortModelName, e.MakeID }, "IX_Vinmaster_ModelYear_ShortModelName_MakeID").HasFillFactor(100);

            entity.HasIndex(e => new { e.VIN, e.ModelYear, e.MakeID, e.MakeCode }, "IX_Vinmaster_Vin")
                .IsClustered()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.ModelYear, e.MakeID, e.FullModelName, e.VIN }, "IX_Vinmaster_lookup").HasFillFactor(100);

            entity.Property(e => e.AntiLockInd).IsFixedLength();
            entity.Property(e => e.AntiTheftInd).IsFixedLength();
            entity.Property(e => e.ClassCode).IsFixedLength();
            entity.Property(e => e.CollSymbol).IsFixedLength();
            entity.Property(e => e.CompSymbol).IsFixedLength();
            entity.Property(e => e.CountrywidePerformance).IsFixedLength();
            entity.Property(e => e.Cylinders).IsFixedLength();
            entity.Property(e => e.DayTimeRunningLightInd).IsFixedLength();
            entity.Property(e => e.EngineSize).IsFixedLength();
            entity.Property(e => e.EngineType).IsFixedLength();
            entity.Property(e => e.FieldChangeInd).IsFixedLength();
            entity.Property(e => e.FourWheelDriveInd).IsFixedLength();
            entity.Property(e => e.ISONum).IsFixedLength();
            entity.Property(e => e.ISOSymbol).IsFixedLength();
            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.ManufacturerID).HasComputedColumnSql("(substring([VIN],(1),(3)))", true);
            entity.Property(e => e.NCIC_Manufacturer).IsFixedLength();
            entity.Property(e => e.NewPriceSymbol).IsFixedLength();
            entity.Property(e => e.NonVSRPerformance).IsFixedLength();
            entity.Property(e => e.NonVSRSymbol).IsFixedLength();
            entity.Property(e => e.NonVSRSymbol_2Digit).IsFixedLength();
            entity.Property(e => e.RestraintInd).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.StateException).IsFixedLength();
            entity.Property(e => e.SymbolChangeInd).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VINChangeInd).IsFixedLength();
            entity.Property(e => e.VSRSymbol).IsFixedLength();
        });

        modelBuilder.Entity<VinrapaLiability>(entity =>
        {
            entity.HasKey(e => e.vinraLiabID)
                .HasName("PK_Vinrapa")
                .IsClustered(false)
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.HasIndex(e => e.VIN, "IX_VIN").HasFillFactor(100);

            entity.HasIndex(e => new { e.ModelYear, e.MakeID }, "IX_VinrapaLiability_ModelYear_MakeID").HasFillFactor(100);

            entity.Property(e => e.AntiLockInd).IsFixedLength();
            entity.Property(e => e.BiSymbol).IsFixedLength();
            entity.Property(e => e.BiSymbolGA).IsFixedLength();
            entity.Property(e => e.ClassCode).IsFixedLength();
            entity.Property(e => e.CurbWeight).IsFixedLength();
            entity.Property(e => e.Cylinders).IsFixedLength();
            entity.Property(e => e.DayTimeRunningLightInd).IsFixedLength();
            entity.Property(e => e.EngineSize).IsFixedLength();
            entity.Property(e => e.EngineType).IsFixedLength();
            entity.Property(e => e.FieldChangeInd).IsFixedLength();
            entity.Property(e => e.FourWheelDriveInd).IsFixedLength();
            entity.Property(e => e.GrossVehicleWeight).IsFixedLength();
            entity.Property(e => e.Height).IsFixedLength();
            entity.Property(e => e.HorsePower).IsFixedLength();
            entity.Property(e => e.ISONum).IsFixedLength();
            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.MedPaySymbol).IsFixedLength();
            entity.Property(e => e.MedPaySymbolGA).IsFixedLength();
            entity.Property(e => e.NewPriceSymbol).IsFixedLength();
            entity.Property(e => e.NewPriceSymbolGA).IsFixedLength();
            entity.Property(e => e.PDSymbol).IsFixedLength();
            entity.Property(e => e.PDSymbolGA).IsFixedLength();
            entity.Property(e => e.PIPSymbol).IsFixedLength();
            entity.Property(e => e.PIPSymbolGA).IsFixedLength();
            entity.Property(e => e.RapaSupplemental).IsFixedLength();
            entity.Property(e => e.RestraintInd).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VINChangeInd).IsFixedLength();
        });

        modelBuilder.Entity<VinrapaLiabilitySupplemental>(entity =>
        {
            entity.HasKey(e => e.vinraLiabID)
                .HasName("PK_VinrapaSup")
                .IsClustered(false);

            entity.Property(e => e.AntiLockInd).IsFixedLength();
            entity.Property(e => e.BiSymbol).IsFixedLength();
            entity.Property(e => e.BiSymbolGA).IsFixedLength();
            entity.Property(e => e.ClassCode).IsFixedLength();
            entity.Property(e => e.CurbWeight).IsFixedLength();
            entity.Property(e => e.Cylinders).IsFixedLength();
            entity.Property(e => e.DayTimeRunningLightInd).IsFixedLength();
            entity.Property(e => e.EngineSize).IsFixedLength();
            entity.Property(e => e.EngineType).IsFixedLength();
            entity.Property(e => e.FieldChangeInd).IsFixedLength();
            entity.Property(e => e.FourWheelDriveInd).IsFixedLength();
            entity.Property(e => e.GrossVehicleWeight).IsFixedLength();
            entity.Property(e => e.Height).IsFixedLength();
            entity.Property(e => e.HorsePower).IsFixedLength();
            entity.Property(e => e.ISONum).IsFixedLength();
            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.MedPaySymbol).IsFixedLength();
            entity.Property(e => e.MedPaySymbolGA).IsFixedLength();
            entity.Property(e => e.NewPriceSymbol).IsFixedLength();
            entity.Property(e => e.NewPriceSymbolGA).IsFixedLength();
            entity.Property(e => e.PDSymbol).IsFixedLength();
            entity.Property(e => e.PDSymbolGA).IsFixedLength();
            entity.Property(e => e.PIPSymbol).IsFixedLength();
            entity.Property(e => e.PIPSymbolGA).IsFixedLength();
            entity.Property(e => e.RapaSupplemental).IsFixedLength();
            entity.Property(e => e.RestraintInd).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VINChangeInd).IsFixedLength();
        });

        modelBuilder.Entity<VinrapaPD>(entity =>
        {
            entity.HasKey(e => e.vinraID)
                .HasName("PK_VinrapaLPMP")
                .IsClustered(false);

            entity.HasIndex(e => new { e.VIN, e.vinraID }, "IX_VIN")
                .IsUnique()
                .HasFillFactor(100);

            entity.HasIndex(e => new { e.ModelYear, e.MakeID }, "IX_VinrapaPD_ModelYear_MakeID").HasFillFactor(100);

            entity.HasIndex(e => e.vinraID, "PK_VinRapaPD VINRA_IDClusteredIndex")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(100);

            entity.Property(e => e.AntiLockInd).IsFixedLength();
            entity.Property(e => e.AntiTheftInd).IsFixedLength();
            entity.Property(e => e.ClassCode).IsFixedLength();
            entity.Property(e => e.CollSymbol).IsFixedLength();
            entity.Property(e => e.CollSymbolGA).IsFixedLength();
            entity.Property(e => e.CompSymbol).IsFixedLength();
            entity.Property(e => e.CompSymbolGA).IsFixedLength();
            entity.Property(e => e.CurbWeight).IsFixedLength();
            entity.Property(e => e.Cylinders).IsFixedLength();
            entity.Property(e => e.DayTimeRunningLightInd).IsFixedLength();
            entity.Property(e => e.ElectronStabilityCtl).IsFixedLength();
            entity.Property(e => e.EngineSize).IsFixedLength();
            entity.Property(e => e.EngineType).IsFixedLength();
            entity.Property(e => e.FieldChangeInd).IsFixedLength();
            entity.Property(e => e.FourWheelDriveInd).IsFixedLength();
            entity.Property(e => e.GrossVehicleWeight).IsFixedLength();
            entity.Property(e => e.Height).IsFixedLength();
            entity.Property(e => e.HorsePower).IsFixedLength();
            entity.Property(e => e.ISONum).IsFixedLength();
            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.ManufacturerID).HasComputedColumnSql("(substring([VIN],(1),(3)))", true);
            entity.Property(e => e.NCIC_Manufacturer).IsFixedLength();
            entity.Property(e => e.RapaSupplemental).IsFixedLength();
            entity.Property(e => e.RestraintInd).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.StateException).IsFixedLength();
            entity.Property(e => e.TonnageInd).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VINChangeInd).IsFixedLength();
            entity.Property(e => e.VMPerformanceInd).IsFixedLength();
        });

        modelBuilder.Entity<VinrapaSupplementalPD>(entity =>
        {
            entity.HasKey(e => e.vinraID)
                .HasName("PK_VinrapaSupLPMP")
                .IsClustered(false);

            entity.HasIndex(e => e.vinraID, "PK_VinRapaPD VINRA_IDClusteredIndex")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.AntiLockInd).IsFixedLength();
            entity.Property(e => e.AntiTheftInd).IsFixedLength();
            entity.Property(e => e.ClassCode).IsFixedLength();
            entity.Property(e => e.CollSymbol).IsFixedLength();
            entity.Property(e => e.CollSymbolGA).IsFixedLength();
            entity.Property(e => e.CompSymbol).IsFixedLength();
            entity.Property(e => e.CompSymbolGA).IsFixedLength();
            entity.Property(e => e.CurbWeight).IsFixedLength();
            entity.Property(e => e.Cylinders).IsFixedLength();
            entity.Property(e => e.DayTimeRunningLightInd).IsFixedLength();
            entity.Property(e => e.ElectronStabilityCtl).IsFixedLength();
            entity.Property(e => e.EngineSize).IsFixedLength();
            entity.Property(e => e.EngineType).IsFixedLength();
            entity.Property(e => e.FieldChangeInd).IsFixedLength();
            entity.Property(e => e.FourWheelDriveInd).IsFixedLength();
            entity.Property(e => e.GrossVehicleWeight).IsFixedLength();
            entity.Property(e => e.Height).IsFixedLength();
            entity.Property(e => e.HorsePower).IsFixedLength();
            entity.Property(e => e.ISONum).IsFixedLength();
            entity.Property(e => e.MakeCode).IsFixedLength();
            entity.Property(e => e.ManufacturerID).HasComputedColumnSql("(substring([VIN],(1),(3)))", true);
            entity.Property(e => e.NCIC_Manufacturer).IsFixedLength();
            entity.Property(e => e.RapaSupplemental).IsFixedLength();
            entity.Property(e => e.RestraintInd).IsFixedLength();
            entity.Property(e => e.SpecialInfoSelector).IsFixedLength();
            entity.Property(e => e.StateException).IsFixedLength();
            entity.Property(e => e.TonnageInd).IsFixedLength();
            entity.Property(e => e.VIN).IsFixedLength();
            entity.Property(e => e.VINChangeInd).IsFixedLength();
            entity.Property(e => e.VMPerformanceInd).IsFixedLength();
        });

        modelBuilder.Entity<WebPDFs>(entity =>
        {
            entity.HasKey(e => e.wdpfID).HasAnnotation("SqlServer:FillFactor", 90);

            entity.HasIndex(e => e.ticket, "IX_WebPDFs_ticket").HasFillFactor(100);

            entity.Property(e => e.dateAdded).HasDefaultValueSql("(getdate())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}