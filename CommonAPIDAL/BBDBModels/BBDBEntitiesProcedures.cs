// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using CommonAPIDAL.BBDBModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace CommonAPIDAL.BBDBModels
{
    public partial class BBDBEntities
    {
        private IBBDBEntitiesProcedures _procedures;

        public virtual IBBDBEntitiesProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new BBDBEntitiesProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IBBDBEntitiesProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class BBDBEntitiesProcedures : IBBDBEntitiesProcedures
    {
        private readonly BBDBEntities _context;

        public BBDBEntitiesProcedures(BBDBEntities context)
        {
            _context = context;
        }

        public virtual async Task<int> uspDrivers_From_ISO_Insert_LYAsync(int? quoteID, int? driverCount, string FirstName, string MiddleName, string LastName, string DLNumber, string DateOfBirth, string SSN, string Gender, string Address, string City, string State, string Zipcode, int? ISOMasterID, OutputParameter<int?> rowID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterrowID = new SqlParameter
            {
                ParameterName = "rowID",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = rowID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "driverCount",
                    Value = driverCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 20,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName",
                    Size = 20,
                    Value = MiddleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 30,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DLNumber",
                    Size = 20,
                    Value = DLNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateOfBirth",
                    Size = 20,
                    Value = DateOfBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 50,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 10,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 35,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "City",
                    Size = 30,
                    Value = City ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "State",
                    Size = 20,
                    Value = State ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zipcode",
                    Size = 10,
                    Value = Zipcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ISOMasterID",
                    Value = ISOMasterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterrowID,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspDrivers_From_ISO_Insert_LY] @quoteID = @quoteID, @driverCount = @driverCount, @FirstName = @FirstName, @MiddleName = @MiddleName, @LastName = @LastName, @DLNumber = @DLNumber, @DateOfBirth = @DateOfBirth, @SSN = @SSN, @Gender = @Gender, @Address = @Address, @City = @City, @State = @State, @Zipcode = @Zipcode, @ISOMasterID = @ISOMasterID, @rowID = @rowID OUTPUT", sqlParameters, cancellationToken);

            rowID.SetValue(parameterrowID.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspDrivers_From_ISO_Select_LYResult>> uspDrivers_From_ISO_Select_LYAsync(int? isoMasterId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "isoMasterId",
                    Value = isoMasterId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspDrivers_From_ISO_Select_LYResult>("EXEC @returnValue = [dbo].[uspDrivers_From_ISO_Select_LY] @isoMasterId = @isoMasterId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspDrivers_From_Prefill_Driver_Select_LYResult>> uspDrivers_From_Prefill_Driver_Select_LYAsync(int? quoteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspDrivers_From_Prefill_Driver_Select_LYResult>("EXEC @returnValue = [dbo].[uspDrivers_From_Prefill_Driver_Select_LY] @quoteID = @quoteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspDrivers_From_Previous_Prefill_Driver_Select_LYResult>> uspDrivers_From_Previous_Prefill_Driver_Select_LYAsync(int? quoteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspDrivers_From_Previous_Prefill_Driver_Select_LYResult>("EXEC @returnValue = [dbo].[uspDrivers_From_Previous_Prefill_Driver_Select_LY] @quoteID = @quoteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspISORawXML_InsertAsync(int? quoteID, string Name, string Type, string Data, int? ResponseTime, string XMLSentToISO, string RequestID, string Product, string LexID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 50,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Type",
                    Size = 50,
                    Value = Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Data",
                    Value = Data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "ResponseTime",
                    Value = ResponseTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "XMLSentToISO",
                    Value = XMLSentToISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "RequestID",
                    Size = 50,
                    Value = RequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Product",
                    Size = 30,
                    Value = Product ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LexID",
                    Size = 50,
                    Value = LexID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspISORawXML_Insert] @quoteID = @quoteID, @Name = @Name, @Type = @Type, @Data = @Data, @ResponseTime = @ResponseTime, @XMLSentToISO = @XMLSentToISO, @RequestID = @RequestID, @Product = @Product, @LexID = @LexID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspPolicies_From_PrefillPolicyDatasResult>> uspPolicies_From_PrefillPolicyDatasAsync(int? isoMasterId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "isoMasterId",
                    Value = isoMasterId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspPolicies_From_PrefillPolicyDatasResult>("EXEC @returnValue = [dbo].[uspPolicies_From_PrefillPolicyDatas] @isoMasterId = @isoMasterId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspVehicles_From_Prefill_Vehicle_Select_LYResult>> uspVehicles_From_Prefill_Vehicle_Select_LYAsync(int? quoteID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspVehicles_From_Prefill_Vehicle_Select_LYResult>("EXEC @returnValue = [dbo].[uspVehicles_From_Prefill_Vehicle_Select_LY] @quoteID = @quoteID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> uspVSRawXML_InsertAsync(int? quoteID, string Name, string Data, int? ResponseTime, string XMLSentToRM, string RequestID, string ErrorMessage, string RequestJS, string ResponseJS, OutputParameter<int?> RetVal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRetVal = new SqlParameter
            {
                ParameterName = "RetVal",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RetVal?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quoteID",
                    Value = quoteID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 50,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Data",
                    Value = Data ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "ResponseTime",
                    Value = ResponseTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "XMLSentToRM",
                    Value = XMLSentToRM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                new SqlParameter
                {
                    ParameterName = "RequestID",
                    Size = 50,
                    Value = RequestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorMessage",
                    Size = 100,
                    Value = ErrorMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RequestJS",
                    Size = -1,
                    Value = RequestJS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ResponseJS",
                    Size = -1,
                    Value = ResponseJS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterRetVal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[uspVSRawXML_Insert] @quoteID = @quoteID, @Name = @Name, @Data = @Data, @ResponseTime = @ResponseTime, @XMLSentToRM = @XMLSentToRM, @RequestID = @RequestID, @ErrorMessage = @ErrorMessage, @RequestJS = @RequestJS, @ResponseJS = @ResponseJS, @RetVal = @RetVal OUTPUT", sqlParameters, cancellationToken);

            RetVal.SetValue(parameterRetVal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<uspXML_ISO_Data_ViewResult>> uspXML_ISO_Data_ViewAsync(int? HdrID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HdrID",
                    Value = HdrID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<uspXML_ISO_Data_ViewResult>("EXEC @returnValue = [dbo].[uspXML_ISO_Data_View] @HdrID = @HdrID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
